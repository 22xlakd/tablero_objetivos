c
@tablero.count
@tablero
c
a.count
a = Variable.sucursal_dashboard(current_user.codigo_sucursal)
exit
a = Variable.sucursal_dashboard(current_user.codigo_sucursal)
a.count
a = Variable.sucursal_dashboard(current_user.codigo_sucursal)
exit
a = Registro.joins(:variable).all
a = Registro.joins(:user).all
a.first.user
a.first
a = Registro.all
a.first
a
a = Variable.sucursal_dashboard(current_user.codigo_sucursal)
a.pluck
a.count
a.methods
a.class
a
a.count
a = Variable.sucursal_dashboard(current_user.codigo_sucursal)
c
@tablero.count
current_user.registros.map{|r| r.variable}.uniq.count
current_user.registros.map{|r| r.variable}.uniq
exit
@tablero.count
@tablero
current_user.registros.map{|r| r.variable}.uniq
current_user.registros
exit
current_user.registros.map{|r| r.variable}.uniq
current_user.registros
@tablero.count
@tablero
exit
authorize! :read, Variable.find(2)
current_user.registros
current_user.variables
current_user
authorize! :read, Variable.all
@tablero.count
@tablero
c
a.sum(:value)
a.sum(0,&:value)
a.sum(&:value)
a.methods.grep /sum/
a.class
a = registros_by_user(user)
c
 @tablero.in_groups_of(4, false){|g| puts g}
 @tablero.in_groups_of(4){|g| puts g}
 @tablero.in_groups_of(4, false){|g| puts g}
@tablero.first.registros_by_user(current_user).count
@tablero.first.registros_by_user(current_user)
@tablero.registros_by_user(current_user)
@tablero
exit
a.registros(current_user.codigo_sucursal).count
a.registros.count
a.registros
a = Variable.first
a.last
a.first
a.count
a = Variable.sucursal_dashboard(current_user.codigo_sucursal)
a.first.registros.count
a.first.registros.where(codigo_sucursal: current_user.codigo_sucursal).count
a = Variable.all
exit
current_user
a.first.registros.count
a.first.registros.where(codigo_sucursal: current_user.codigo_sucursal).count
a = Variable.all
c
a.first.registros.where(codigo_sucursal: current_user.codigo_sucursal).count
a.first.registros.count
a.first
a = Variable.all
a.first.registros.where(codigo_sucursal: current_user.codigo_sucursal).count
a.first.registros.count
a.first.registros.where(codigo_sucursal: current_user.codigo_sucursal)
a.first.registros
a.first
a,first
a.count
a = Variable.all
Variable.joins(registros: :user).where('registros.codigo_sucursal': current_user.codigo_sucursal)
@tablero
exit
@tablero[2]
@tablero[1]
@tablero.first
@tablero.count
@tablero.in_groups_of(4, 'AAA'){|g| puts g}
@tablero.in_groups_of(4, ''){|g| puts g}
@tablero.in_groups_of(4, false){|g| puts g}
c
c_variable.first
c_variable.last
c_variable.count
c
c_variable.last
c_variable.first
c_variable.count
c_variable
c
@tablero.first
@tablero.count
@tablero
c
local_all
local
variables
local_variables
tablero
c
Time.zone.today.strftime("%B")
    - :month
    - :day
    order:
    - diciembre
    - noviembre
    - octubre
    - septiembre
    - agosto
    - julio
    - junio
    - mayo
    - abril
    - marzo
    - febrero
    - enero
    -
    month_names:
      short: "%d de %b"
      long: "%A, %d de %B de %Y"
      default: "%d/%m/%Y"
    formats:
    - sábado
    - viernes
    - jueves
    - miércoles
    - martes
    - lunes
    - domingo
    day_names:
    - dic
    - nov
    - oct
    - sep
    - ago
    - jul
    - jun
    - may
    - abr
    - mar
    - feb
    - ene
    -
    abbr_month_names:
    - sáb
    - vie
    - jue
    - mié
    - mar
    - lun
    - dom
    abbr_day_names:
Time.zone.today.date:
Time.zone.today
c
variable_params
c
variable_params
c
variable_params
params
variable_params
c
@variable.valor_objetivo.to_f
@variable.valor_objetivo
@variable
variable_params
c
I18n.t('devise.confirmations.confirmed')
I18n.t('devise.confirmations.confirmed'
I18n.t
I18n.t('tipo')
I18n.t
c
I18n.t('tipo')
I18n.t
I18n.methods
I18n.methos
I18n
c
exit
I18n.t('hello')
t('hello')
I18n.available_locales
exit
I18n.available_locales
c
exit
I18n.available_locales
I18n.locale
I18n.methods
I18n
I18n.t
t
c
usuario2.include_role?('admin')
usuario2.respond_to?(:include_role?)
ability_admin
usuario2.roles.first
usuario2.roles
usuario2
c
exit
User.create(nombre:'lalasl')
c
usuario_prueba.save
c
usuario_prueba
c
usuario_prueba
exit
a.errors
a.save
a.password = "dasdaads"
a.email = "sdadas@sdasd.com"
a.errors
a.save
a.nombre = "dsdas"
a = User.new
create(:user)
usuario_prueba
c
usuario_prueba
c
usuario_prueba
c
create(:user, nombre: 'sdasd')
create(:user, name: 'sdasd')
:user
FactoryBot
c
User.user_authentication_token
user_authentication_token
