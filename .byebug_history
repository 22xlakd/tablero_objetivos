c
subject.roles
c
a.roles
a = create(:sucursal_user)
subject.roles
subject
c
variable2.valid?
c
variable2.valid?
variable2.puntaje
variable2.save
variable2.can_save?
variable2
c
ability.can?(:read,r_1)
exit
ability.can?(:read,r_1)
variable.objetivos.first.user.codigo_sucursal.to_i == r_1.codigo_sucursal
variable.objetivos.first.user.codigo_sucursal == r_1.codigo_sucursal
variable.objetivos.first.user.codigo_sucursal.to_i
variable.objetivos.first.user.codigo_sucursal
r_1
variable.objetivos.first.user
variable.objetivos.first
ability.can?(:read,r_1)
variable.objetivos
c
variable.objetivos
variable.user
variable
usuario
ability.user
user
r_1.codigo_sucursal
r_1.user
exit
objetivos
objetivos.select { |o| o.user == user }.first
exit
objetivos.select{|o| o.user == user}
objetivos.collect{|o| o.user == user}
objetivos.collect{|o| o.user == user)
objetivos
objetivos.find_by(user: user)
exit
c
registros.select{|r| r.codigo_sucursal == user.codigo_sucursal.to_i && r.fecha.month == month.to_i && r.fecha.year == year.to_i}
registros.select{|r| r.codigo_sucursal == user.codigo_sucursal.to_i && fecha.month == month.to_i && fecha.year == year.to_i}
user.codigo_sucursal
registros.first.codigo_sucursal
registros
registros.select{|r| r.codigo_sucursal == user.codigo_sucursal}
registros.select{|r| r.codigo_sucursal == user.codigo_sucursal && fecha.month == month.to_i}
registros.select{|r| r.codigo_sucursal == user.codigo_sucursal && fecha.month == month.to_i && fecha.year == year.to_i}
month
year
registros.first
registros[1]
registros
registros.count
a.count
a = registros.where(codigo_sucursal: user.codigo_sucursal).where('extract(month from fecha) = ?', month).where('extract(year from fecha) = ?', year)
user
current_user
registros
exit
c
registros.select{|r| r.codigo_sucursal == user.codigo_sucursal && fecha.month == month.to_i && fecha.year == year.to_i}
registros.select{|r| r.codigo_sucursal == user.codigo_sucursal && fecha.month == month.to_i && fecha.year == year}
registros.where(codigo_sucursal: user.codigo_sucursal).where('extract(month from fecha) = ?', month).where('extract(year from fecha) = ?', year)
c
exit
c
registros.select { |r| r.variable_id == variable_id && r.fecha.month == idx && r.fecha.year == year.to_i }
year
registros[2].fecha.year
idx
registros[2].fecha.month
variable_id
registros[2].variable_id
registros[2]
registros.select { |r| r.variable_id == variable_id && r.fecha.month == idx && r.fecha.year == year }
registros.map{ |r| puts "fecha:#{r.fecha}...#{r.fecha.month}..#{r.fecha.year}...var:#{r.variable.id}...#{r.user.id}...#{id}."}
variable_id
idx
c
variable_id
registros.map{ |r| puts "fecha:#{r.fecha}...#{r.fecha.month}..#{r.fecha.year}...var:#{r.variable.id}...#{r.user.id}...#{id}."}
idx
exit
registros.map{ |r| puts "fecha:#{r.fecha}...#{r.fecha.month}..#{r.fecha.year}...var:#{r.variable.id}...#{r.user.id}...#{id}."}
c
registros.map{ |r| puts "fecha:#{r.fecha}...#{r.fecha.month}..#{r.fecha.year}...var:#{r.variable.id}...#{r.user.id}...#{id}."}
registros
registros.select { |r| r.variable_id == variable_id && r.fecha.month == idx && r.fecha.year == year }
idx
c
idx
c
idx
exit
c
idx
c
idx
c
registros.select { |r| r.variable_id == variable_id && r.fecha.month == idx && r.fecha.year == year }
idx
registros.map{ |r| puts "fecha:#{r.fecha}...#{r.fecha.month}..#{r.fecha.year}...var:#{r.variable.id}...#{r.user.id}...#{id}."}
registros
year
idx
variable_id
registros.select { |r| r.variable_id == variable_id && r.fecha.month == idx && r.fecha.year == year }
c
break 69
c
c_objetivo.variable.id
year
c
break 54
objetivos.count
objetivos
c
objetivos.last.variable.puntaje
objetivos.last.cumplido?(g.sum(&:value))
g = registros.select { |r| r.variable_id == 4 && r.fecha.month == 3 && r.fecha.year == 2018 }
objetivos.last.cumplido?(a.sum(&:value))
a.sum(&:value).to_f
a = registros.select { |r| r.variable_id == 4 && r.fecha.month == 2 && r.fecha.year == 2018 }
objetivos.first.variable.puntaje
objetivos.first.puntaje
objetivos.first.cumplido?(g.sum(&:value))
g = registros.select { |r| r.variable_id == 3 && r.fecha.month == 3 && r.fecha.year == 2018 }
objetivos.first.cumplido?(a.sum(&:value))
objetivos.first.valor.to_f
objetivos.first.valor
objetivos.first.variable.id
objetivos
a.sum(&:value).to_f
a.sum(&:value)
a.count
a = registros.select { |r| r.variable_id == 3 && r.fecha.month == 2 && r.fecha.year == 2018 }
a = registros.select { |r| r.variable_id == 3 && r.fecha.month == w && r.fecha.year == 2018 }
a = registros.select { |r| r.variable_id == 3 && r.fecha.month == 1 && r.fecha.year == 2018 }
registros.map{ |r| puts "fecha:#{r.fecha}...#{r.fecha.month}..#{r.fecha.year}...var:#{r.variable.id}...#{r.user.id}...#{id}."}
registros.map{ |r| puts "fecha:#{r.fecha}...#{r.fecha.month}..#{r.fecha.year}...var:#{r.variable.id}.."}
registros[4].variable
registros[3].variable
registros[2].variable
registros[1].variable
registros[0].variable
registrosregistros.select { |r| r.variable_id == variable_id && r.fecha.month == idx && r.fecha.year == year }
registros.first
objetivos.first.variable
calculate_monthly_values(year, objetivos.first.variable.id)
year
registros.count
registros
objetivos.first
objetivos.count
objetivos
objetivis
total_year_points
n
objetivos.count
c
registros.select { |r| r.variable_id == c_objetivo.variable.id && r.fecha.month == Time.zone.today.month && r.fecha.year == Time.zone.today.year }.sum(&:value)
Time.zone.today.month
registros.first.fecha.month
registros.first.fecha
registros.first
registros
exit
c
a.first.value.to_f
a.count
a.sum(&:value).to_f
a.sum(&:value).tof
a.sum(&:value)
a.sum
a.methods.grep /sum/
a.methods
a = registros.select{|r| r.variable_id == c_objetivo.variable.id}
a = registros.select{|r| r.variable_id == c_objetivo.variable.id}.map(&:value)
a
pepe
pepe = a.sum(:value)
a.sum(:value)
a.class
a = registros.select{|r| r.variable_id == c_objetivo.variable.id}
a
a = registros.select{|r| r.variable_id == c_objetivo.variable.id}.sum(:value)
a = registros.select{|r| r.variable_id == c_objetivo.variable.id}
registros
cccc
c
Time.zone.parse('2018-02-03')
Time.zone.parse('03/02/18')
Time.zone
variable.registros[5]
variable.registros.count
variable.registros
exit
reg5.value.to_f
reg4.value.to_f
reg3.value.to_f
reg5
reg4
reg3
objetivo4.valor.to_f
objetivo4.valor
objetivo4
objetivo
user2
objetivo2
c
variable2
variable
variable.objetivos
Variable.all.count
c
Variable.all.count
Variable.all
variable2
variable
registro3.variable
registro3
objetivo.cumplido?
objetivo2.user
objetivo.user
subject.id
objetivo
reg3
reg1
subject.objetivos
user2.calculate_current_month_points
subject.calculate_current_month_points
c
user2.calculate_current_month_points
subject.calculate_current_month_points
subject
variable2
variable
c
reg1
reg3
user2
c
user2
reg3
reg2
reg1
exit
